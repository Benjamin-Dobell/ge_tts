ge_tts_package('ge_tts/PlayerDropZone', function()
    ---@type ge_tts__TableUtils
    local TableUtils = ge_tts_require('ge_tts/TableUtils')

    ---@type ge_tts__DropZone
    local DropZone = ge_tts_require('ge_tts/DropZone')

    ---@class ge_tts__PlayerDropZone : ge_tts__DropZone
    local PlayerDropZone = {}

    setmetatable(PlayerDropZone, TableUtils.merge(getmetatable(DropZone), {
        ---@param zonePositionOrData ge_tts__CharVec3|ge_tts__NumVec3|table
        ---@param zoneRotation ge_tts__CharVec3|ge_tts__NumVec3
        ---@param zoneScale ge_tts__CharVec3|ge_tts__NumVec3
        ---@param occupantScale number|nil @Optional - occupant's desired X-axis scale. When scaling is applied it is applied to all dimensions i.e. aspect ratio is preserved. `nil` means dropped objects will not have their scale altered.
        ---@param owner userdata @tts__Player - TTS player that owns this PlayerDropZone
        __call = function(_, zonePositionOrData, zoneRotation, zoneScale, occupantScale, owner)
            ---@type ge_tts__DropZone
            local self = DropZone(zonePositionOrData, zoneRotation, zoneScale, occupantScale)

            if PlayerDropZone.isSavedState(zonePositionOrData) then
                local data = zonePositionOrData

                owner = Player[data.ownerColor]
            end

            function self.getOwner()
                return owner
            end

            local superSave = self.save

            function self.save()
                return TableUtils.merge(superSave(), {
                    ownerColor = owner.color
                })
            end

            return self
        end,
        __index = DropZone,
    }))

    return PlayerDropZone
end)
