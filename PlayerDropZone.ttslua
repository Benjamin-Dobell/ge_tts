local TableUtils = require('ge_tts.TableUtils')
local DropZone = require('ge_tts.DropZone')

---@class ge_tts__PlayerDropZone : ge_tts__DropZone

---@shape ge_tts__PlayerDropZone_SavedState : ge_tts__DropZone_SavedState
---@field ownerColor tts__PlayerColor

---@class ge_tts__static_PlayerDropZone : ge_tts__static_DropZone
local PlayerDropZone = {}

setmetatable(PlayerDropZone, TableUtils.merge(getmetatable(DropZone), {
    ---@param zonePositionOrSavedState tts__VectorShape | table
    ---@param zoneRotation tts__VectorShape
    ---@param zoneScale tts__VectorShape
    ---@param occupantScale nil | number @Optional - occupant's desired X-axis scale. When scaling is applied it is applied to all dimensions i.e. aspect ratio is preserved. `nil` means dropped objects will not have their scale altered.
    ---@param owner tts__Player @TTS player that owns this PlayerDropZone
    __call = function(_, zonePositionOrSavedState, zoneRotation, zoneScale, occupantScale, owner)
        local self = --[[---@type ge_tts__PlayerDropZone]] DropZone(zonePositionOrSavedState, zoneRotation, zoneScale, occupantScale)

        function self.getOwner()
            return owner
        end

        local superSave = self.save

        ---@return ge_tts__PlayerDropZone_SavedState
        function self.save()
            return --[[---@type ge_tts__PlayerDropZone_SavedState]] TableUtils.merge(superSave(), {
                ownerColor = owner.color
            })
        end

        if PlayerDropZone.isSavedState(zonePositionOrSavedState) then
            local data = --[[---@type ge_tts__PlayerDropZone_SavedState]] zonePositionOrSavedState

            owner = Player[data.ownerColor]
        end

        return self
    end,
    __index = DropZone,
}))

return PlayerDropZone
