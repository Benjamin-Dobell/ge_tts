ge_tts_package('ge_tts/PlayerDropZone', function()
    ---@type ge_tts__TableUtils
    local TableUtils = ge_tts_require('ge_tts/TableUtils')

    ---@type ge_tts__DropZone
    local DropZone = ge_tts_require('ge_tts/DropZone')

    ---@class ge_tts__PlayerDropZone : ge_tts__DropZone
    local PlayerDropZone = {}

    setmetatable(PlayerDropZone, TableUtils.merge(getmetatable(DropZone), {
        ---@param positionOrData number[]|table @2D position, or saved data table
        ---@param size number[] @2D size
        ---@param rotation number @rotation around Y-axis, in degrees
        ---@param occupantScale number|nil @Occupant's desired X-axis scale. When scaling is applied it is applied to all dimensions i.e. aspect ratio is preserved. `nil` means dropped objects will not have their scale altered.
        ---@param owner userdata @tts__Player - TTS player that owns this PlayerDropZone
        __call = function(_, positionOrData, size, rotation, occupantScale, owner)
            ---@type ge_tts__PlayerDropZone
            local self = DropZone(positionOrData, size, rotation, occupantScale)

            if PlayerDropZone.isSavedState(positionOrData) then
                local data = positionOrData
                owner = Player[data.ownerColor]
            end

            function self.getOwner()
                return owner
            end

            local superSave = self.save

            function self.save()
                local data = superSave()

                return TableUtils.merge({
                    ownerColor = owner.color
                })
            end

            return self
        end,
        __index = DropZone,
    }))

    return PlayerDropZone
end)
