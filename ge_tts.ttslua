(function()
    local entryPoints = {}
    local packages = {}

    function ge_tts_package(name, body)
        if not package.loaded[name] then
            entryPoints[name] = body
            package.loaded[name] = true
        end
    end

    function ge_tts_require(name)
        if not package.loaded[name] then
            error('Tried to ge_tts_require ' .. name .. ', but no such package has been registered')
        end

        local loadedPackage = packages[name]

        if loadedPackage then
            if GE_TTS_LOGGING_ENABLED and type(loadedPackage) == 'table' and loadedPackage.__loading then
                print('Warning: Cyclical use of package ' .. name)
            end

            return loadedPackage
        else
            loadedPackage = {
                __loading = true
            }

            local loadedPackageMetatable = {
                __index = function(t, k)
                    error('Cyclical use of ' ..  name .. '.' .. k .. ' is not legal in entry-point code')
                end
            }

            setmetatable(loadedPackage, loadedPackageMetatable)

            packages[name] = loadedPackage

            local packageContent = entryPoints[name]()

            loadedPackage.__loading = nil

            if packageContent and type(packageContent) == 'table' then
                local packageContentMetatable = getmetatable(packageContent)

                -- Looks like you can't set a metatable on a metatable, so we copy instead...
                if packageContentMetatable then
                    for k, v in pairs(packageContentMetatable) do
                        loadedPackageMetatable[k] = v
                    end
                end

                -- with the exception of __index and __newindex, which proxy through to packageContent.
                loadedPackageMetatable.__index = packageContent
                loadedPackageMetatable.__newindex = function(_, k, v)
                    packageContent[k] = v
                end
            elseif packageContent then
                loadedPackage.__content = packageContent
            end
        end

        return loadedPackage
    end

    function ge_tts_loaded_packages()
        return packages
    end
end)();
