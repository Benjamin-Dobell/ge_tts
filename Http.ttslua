local Base64 = require('ge_tts.Base64')
local Logger = require('ge_tts.Logger')
local Json = require('ge_tts.Json')
local TableUtils = require('ge_tts.TableUtils')

---@shape ge_tts__Http_Response
---@field statusCode number
---@field headers table<string, string>
---@field body string | table

---@alias ge_tts__Http_Callback fun(response: nil | ge_tts__Http_Response, error: nil | string): void

---@type nil | string
local decodeJsonContentType = 'application/json'

---@class ge_tts__Http
local Http = {}

---@param type nil | string
function Http.setDecodeJsonContentType(type)
    decodeJsonContentType = type
end

---@return nil | string
function Http.getDecodeJsonContentType()
    return decodeJsonContentType
end

----@param headers table<string, string>
----@param name string
----@return nil | string, nil | string @value, headerName - `headerName` being the case-sensitive variant of `name` found within headers
function Http.getHeader(headers, name)
    name = name:lower()

    return TableUtils.detect(headers, function(_, key)
        return key:lower() == name
    end)
end

---@param method string
---@param url string
---@param headers nil | table<string, string>
---@param body nil | string
---@param callback ge_tts__Http_Callback
---@return tts__WebRequest
local function performRequest(method, url, headers, body, callback)
    return WebRequest.custom(url, method, true, body, headers, function(request)
        if request.is_error then
            callback(nil, request.error)
        elseif request.is_done then
            ---@type ge_tts__Http_Response
            local response = {
                statusCode = request.response_code,
                headers = request.getResponseHeaders(),
                body = request.text or ""
            }

            local contentType = request.getResponseHeader('Content-Type')

            if contentType and (--[[---@not nil]] contentType):lower() == decodeJsonContentType then
                Json.decodeAsync(request.text, {
                    ---@param value table
                    onCompletion = function(value)
                        response.body = value
                        callback(response, nil)
                    end,
                    onError = function(message)
                        callback(nil, "Failed to parse JSON body: " .. message)
                    end,
                })
                return
            end

            callback(response, nil)
        end
    end)
end

---@param method string
---@param url string
---@param headers nil | table<string, string>
---@param callback ge_tts__Http_Callback
---@return tts__WebRequest
function Http.request(method, url, headers, callback)
    return performRequest(method, url, headers, nil, callback)
end

---@param method string
---@param url string
---@param body table<string, any> | string @If provided as a table, it will be JSON encoded. If provided as a number array, numbers are assumed to be [0, 255] and Base64 encoded. Otherwise, the body is a string.
---@param headersOrNil nil | table<string, string>
---@param callback ge_tts__Http_Callback
function Http.submit(method, url, body, headersOrNil, callback)
    ---@type table<string, string>
    local headers = headersOrNil or {}

    ---@type table<string, any>
    local options = {headers = headers}

    if type(body) == 'table' then
        local contentType, contentTypeHeader = Http.getHeader(headers, 'Content-Type')
        contentTypeHeader = contentTypeHeader or 'Content-Type'

        if not (contentType and (--[[---@not nil]] contentType):sub(-4) == 'json') then
            headers = TableUtils.copy(headers)
            headers[--[[---@not nil]] contentTypeHeader] = 'application/json'
        end

        body = Json.encode(body)
    end

    options.body = body

    Http.request(method, url, options, callback)
end

---@param url string
---@param headers nil | table<string, string>
---@param callback ge_tts__Http_Callback
function Http.delete(url, headers, callback)
    Http.request('DELETE', url, headers, callback)
end

---@param url string
---@param headers nil | table<string, string>
---@param callback ge_tts__Http_Callback
function Http.get(url, headers, callback)
    Http.request('GET', url, headers, callback)
end

---@param url string
---@param body table<string, any> | string @If provided as a table, it will be JSON encoded. If provided as a number array, numbers are assumed to be [0, 255] and Base64 encoded. Otherwise, the body is a string.
---@param headers nil | table<string, string>
---@param callback ge_tts__Http_Callback
function Http.patch(url, body, headers, callback)
    Http.submit('PATCH', url, body, headers, callback)
end

---@param url string
---@param body table<string, any> | string @If provided as a table, it will be JSON encoded. If provided as a number array, numbers are assumed to be [0, 255] and Base64 encoded. Otherwise, the body is a string.
---@param headers nil | table<string, string>
---@param callback ge_tts__Http_Callback
function Http.post(url, body, headers, callback)
    Http.submit('POST', url, body, headers, callback)
end

---@param url string
---@param body table<string, any> | string @If provided as a table, it will be JSON encoded. If provided as a number array, numbers are assumed to be [0, 255] and Base64 encoded. Otherwise, the body is a string.
---@param headers nil | table<string, string>
---@param callback ge_tts__Http_Callback
function Http.put(url, body, headers, callback)
    Http.submit('PUT', url, body, headers, callback)
end

return Http
