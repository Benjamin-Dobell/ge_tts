local Object = require('ge_tts/Object')
local ObjectUtils = require('ge_tts/ObjectUtils')
local TableUtils = require('ge_tts/TableUtils')
local Vector3 = require('ge_tts/Vector3')

---@param position ge_tts__Vector3
---@param rotation ge_tts__Vector3
---@param scale ge_tts__Vector3
---@param options table
---@param callback fun(object: tts__ScriptingTrigger) @object spawned callback
---@return tts__ScriptingTrigger
local function spawn(position, rotation, scale, options, callback)
    local jsonTable = TableUtils.merge({
        Name = Object.Name.ScriptingTrigger,
        Transform = {
            posX = position.x,
            posY = position.y,
            posZ = position.z,
            rotX = rotation.x,
            rotY = rotation.y,
            rotZ = rotation.z,
            scaleX = scale.x,
            scaleY = scale.y,
            scaleZ = scale.z,
        },
        Locked = true,
    }, options)

    return --[[---@type tts__ScriptingTrigger]] ObjectUtils.safeSpawnObject(jsonTable, --[[---@type fun(o: tts__Object): void]] callback)
end

---@class ge_tts__Trigger

---@class ge_tts__static_Trigger
local Trigger = {}

---@shape ge_tts__Trigger_SavedState
---@field __savedState true
---@field guid string

setmetatable(Trigger, {
    ---@overload fun(data: table, ...: any)
    ---@overload fun(triggerPositionOrSavedState: tts__VectorShape, triggerRotation: tts__VectorShape, triggerScale: tts__VectorShape, ...: any)
    ---@param class ge_tts__static_Trigger
    ---@param triggerPositionOrSavedState tts__VectorShape|table
    ---@param triggerRotation tts__VectorShape
    ---@param triggerScale tts__VectorShape
    ---@vararg any
    __call = function(class, triggerPositionOrSavedState, triggerRotation, triggerScale, ...)
        local self = --[[---@type ge_tts__Trigger]] {}

        setmetatable(self, {
            __tostring = function(_)
                return self.toString()
            end
        })

        ---@type tts__ScriptingTrigger
        local scriptingTrigger

        -- Callback for sub-classes to override.
        function self.onSpawned()
        end

        ---@return ge_tts__Vector3
        function self.getPosition()
            return Vector3(scriptingTrigger.getPosition())
        end

        ---@return ge_tts__Vector3
        function self.getRotation()
            return Vector3(scriptingTrigger.getRotation())
        end

        ---@return ge_tts__Vector3
        function self.getScale()
            return Vector3(scriptingTrigger.getScale())
        end

        ---@return tts__ScriptingTrigger @Associated TTS scripting trigger
        function self.getScriptingTrigger()
            return scriptingTrigger
        end

        ---@return table
        function self.save()
            return {
                __savedState = true,
                guid = scriptingTrigger and scriptingTrigger.getGUID(),
            }
        end

        function self.destruct()
            scriptingTrigger.destruct()
        end

        ---@return string
        function self.toString()
            return 'Trigger (' .. tostring(scriptingTrigger.guid) .. ')'
        end

        if Trigger.isSavedState(triggerPositionOrSavedState) then
            local data = --[[---@type ge_tts__Trigger_SavedState]] triggerPositionOrSavedState
            scriptingTrigger = --[[---@type tts__ScriptingTrigger]] ObjectUtils.getSpawnedObject(data.guid)
        elseif type(triggerPositionOrSavedState) == 'userdata' then
            scriptingTrigger = --[[---@type tts__ScriptingTrigger]] ObjectUtils.getSpawnedObject(--[[---@type string]] triggerPositionOrSavedState)
        else
            local position = Vector3(triggerPositionOrSavedState)
            local rotation = Vector3(triggerRotation)
            local scale = Vector3(triggerScale)

            scriptingTrigger = spawn(position, rotation, scale, class.spawnOptions(...), function()
                self.onSpawned()
            end)
        end

        return self
    end,
})

---@vararg any
---@return table<string, any>
function Trigger.spawnOptions(...)
    return {}
end

function Trigger.isSavedState(value)
    return type(value) == 'table' and (--[[---@type table]] value).__savedState
end

return Trigger
