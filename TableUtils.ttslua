-- Omitted to prevent cyclic require:
-- require('ge.tts/License')

-- This module operates on tables that contain only positive consecutive integer keys starting at 1 (i.e. a plain array), as well as tables which contain no
-- array component. Behavior is undefined for tables that contain a key for [1] as well as non-consecutive integer or non-integer keys.

---@generic T
---@param length number
---@return fun(arr: std__Packed<T>, i: number): nil | (number, T)
local function fixedLengthIterator(length)
    ---@type fun(arr: std__Packed<T>, i: number): nil | (number, T)
    return function(arr, i)
        i = i + 1
        if i <= length then
            return i, arr[i]
        end
    end
end

---@overload fun<V, A : std__Packed<V>>(arr: A): (fun(arr: A, i: number): number, V), V[], 0
---@overload fun<V>(arr: V[]): (fun(arr: V[], i: number): number, V), V[], 0
---@generic K, V
---@param tab table<K, V>
---@return (fun(tab: table<K, V>, k: K): nil | (K, V)), table<K, V>, K
local function iterate(tab)
    local fixedLength = (--[[---@type std__Packed<any>]] tab).n

    if type(fixedLength) == 'number' and fixedLength >= 0 then
        return --[[---@type fun(tab: table<K, V>, k: K): nil | (K, V)]] fixedLengthIterator(fixedLength), tab, --[[---@type K]] 0
    elseif tab[--[[---@type K]] 1] ~= nil then
        return --[[---@type (fun(tab: table<K, V>, k: K): nil | (K, V)), table<K, V>, K]] ipairs(--[[---@type V[] ]] tab)
    else
        return pairs(tab)
    end
end

---@class ge_tts__TableUtils
local TableUtils = {}

--- Returns true if TableUtils will interpret the table as an array i.e. if tab[1] ~= nil or
--- type(tab.n) == 'number'.
---
--- If tab is an array, and it's passed to a TableUtils function that iterates over tab calling a callback, the
--- iteration over keys is guaranteed to take place in sequential order (Ã  la ipairs).
---
--- In the case of type(tab.n) == 'number', tab.n will be treated as the length of the array and TableUtils will
--- continue iterating over "holes" (nil values) up to this length.
---@overload fun<V>(tab: V[]): true
---@overload fun<V>(tab: std__Packed<V>): true
---@overload fun<V>(tab: table<boolean, V>): false
---@overload fun<V>(tab: table<string, V>): false
---@overload fun<V>(tab: table<table, V>): false
---@overload fun<V>(tab: table<userdata, V>): false
---@param tab table
---@return boolean
function TableUtils.isArray(tab)
    return tab[1] ~= nil or type((--[[---@type std__Packed<any>]] tab).n) == 'number'
end

--- Returns the length of arr and a boolean indicating whether arr is a std__Packed<V>.
---@generic V
---@param arr V[] | std__Packed<V>
---@return number, boolean
function TableUtils.arrayLength(arr)
    local fixedLength = (--[[---@type std__Packed<V>]] arr).n
    local isFixed = type(fixedLength) == 'number'
    return isFixed and fixedLength or #arr, isFixed
end

---@overload fun<V, MappedV>(tab: V[], func: fun(value: V, key: number): MappedV): MappedV[]
---@generic K, V, MappedV
---@param tab table<K, V>
---@param func fun(value: V, key: K): MappedV
---@return table<K, MappedV>
function TableUtils.map(tab, func)
    ---@type table<K, MappedV>
    local mapped = {}

    for k, v in iterate(tab)  do
        mapped[k] = func(v, k)
    end

    return mapped
end

---@generic K, V
---@param tab table<K, V>
---@return table<V, K>
function TableUtils.invert(tab)
    ---@type table<V, K>
    local inverted = {}

    for k, v in pairs(tab) do
        inverted[v] = k
    end

    return inverted
end

---@generic K, V, RemappedK
---@param tab table<K, V>
---@param func fun(value: V, key: K): RemappedK
---@return table<RemappedK, V>
function TableUtils.remap(tab, func)
    ---@type table<RemappedK, V>
    local remapped = {}

    for k, v in iterate(tab) do
        remapped[func(v, k)] = v
    end

    return remapped
end

---@overload fun<V>(arr: V[], predicate: fun(value: V, index: number): boolean): V[], number
---@overload fun<V>(arr: std__Packed<V>, predicate: fun(value: V, index: number): boolean): std__Packed<V>, number
---@generic K, V
---@param tab table<K, V>
---@param predicate fun(value: V, key: K): boolean
---@return table<K, V>, number
function TableUtils.select(tab, predicate)
    ---@type table<K, V>
    local selected = {}

    local count = 0

    if TableUtils.isArray(tab) then
        local i = 0

        for k, v in iterate(tab) do
            if predicate(v, k) then
                i = i + 1
                (--[[---@type V[] ]] selected)[i] = v
            end
        end

        if type((--[[---@type std__Packed<any>]] tab).n) == 'number' then
            (--[[---@type std__Packed<any>]] selected).n = i
            count = i
        end
    else
        for k, v in pairs(tab) do
            if predicate(v, k) then
                selected[k] = v
                count = count + 1
            end
        end
    end

    return selected, count
end

---@overload fun<V>(arr: V[],  predicate: (fun(value: V, index: number): boolean), ...: V[]): void
---@overload fun<V, PV : V, CovariantA : PV>(arr: V[], predicate: (fun(value: PV, index: number): boolean), a: CovariantA[]): void
---@overload fun<V, PV : V, CovariantA : PV, CovariantB : PV>(arr: V[], predicate: (fun(value: PV, index: number): boolean), a: CovariantA[], b: CovariantB[]): void
---@overload fun<V, PV : V, CovariantA : PV, CovariantB : PV, CovariantC : PV>(arr: V[], predicate: (fun(value: PV, index: number): boolean), a: CovariantA[], b: CovariantB[], c: CovariantC[]): void
---@overload fun<V, PV : V, CovariantA : PV, CovariantB : PV, CovariantC : PV, CovariantD : PV>(arr: V[], predicate: (fun(value: PV, index: number): boolean), a: CovariantA[], b: CovariantB[], c: CovariantC[], d: CovariantD[]): void
---@overload fun<V, PV : V, Covariant : PV>(arr: V[], predicate: (fun(value: PV, index: number): boolean), ...: Covariant[]): void
---@overload fun<V>(arr: std__Packed<V>, predicate: (fun(value: V, index: number): boolean), ...: V[] | std__Packed<V>): void
---@generic K, V
---@param tab table<K, V>
---@param predicate fun(value: V, key: K): boolean
---@vararg table<K, V>
---@return void
function TableUtils.selectInject(tab, predicate, ...)
    local otherTables = { ... }

    ---@type nil | boolean
    local isArray = nil

    ---@type number
    local arrayLength = 0

    ---@type boolean
    local isPacked = false

    for _, otherTable in ipairs(otherTables) do
        if isArray == nil and next(tab) then
            isArray = TableUtils.isArray(tab)

            if isArray then
                arrayLength, isPacked = TableUtils.arrayLength(--[[---@type V[] | std__Packed<V>]] tab)
            end
        end

        if isArray then
            local arr = --[[---@type V[] | std__Packed<V>]] tab

            for i, v in iterate(--[[---@type V[] ]] otherTable) do
                if predicate(v, --[[---@type K]] i) then
                    arrayLength = arrayLength + 1
                    arr[arrayLength] = v
                end
            end
        else
            for k, v in pairs(otherTable) do
                if predicate(v, k) then
                    tab[k] = v
                end
            end
        end
    end

    if isPacked then
        (--[[---@type std__Packed<V>]] tab).n = arrayLength
    end
end

---@overload fun<V>(arr: V[], predicate: fun(value: V, index: number): boolean): V[]
---@generic K, V
---@param tab table<K, V>
---@param predicate fun(value: V, key: K): boolean
---@return table<K, V>, number
function TableUtils.reject(tab, predicate)
    return TableUtils.select(tab, function(v, k) return not predicate(v, k) end)
end

---@overload fun<R, K, V: R>(tab: table<K, V>, func: fun(memo: R, value: V, key: K): R): nil | R
---@generic K, V, R
---@param tab table<K, V>
---@param initial R
---@param func fun(memo: R, value: V, key: K): R
---@return R
function TableUtils.reduce(tab, initial, func)
    local iterator, _, initialK = iterate(tab)

    ---@type R
    local memo

    ---@type fun(memo: R, value: V, key: K): R
    local reducer

    if func then
        memo = initial
        reducer = func
    else
        local control, value = iterator(tab, initialK)

        if control == nil then
            -- Overload may return nil
            return --[[---@type any]] nil
        end

        initialK = --[[---@not nil]] control
        memo = --[[---@type R]] value
        reducer = --[[---@type fun(memo: R, value: V, key: K): R]] initial
    end

    if not func then
        initialK = --[[---@type K]] memo
    end

    for k, v in iterator, tab, initialK do
        memo = reducer(memo, v, k)
    end

    return memo
end

---@generic K, V
---@param tab table<K, V>
---@param value V
---@return nil | K
function TableUtils.find(tab, value)
    for k, v in iterate(tab) do
        if v == value then
            return k
        end
    end

    return nil
end

---@generic K, V
---@param tab table<K, V>
---@param predicate fun(value: V, key: K): boolean
---@return (nil, nil) | (V, K)
function TableUtils.detect(tab, predicate)
    for k, v in iterate(tab) do
        if predicate(v, k) then
            return v, k
        end
    end

    return nil, nil
end

---@generic T
---@param tab T
---@param recursive? nil | boolean
---@return T
function TableUtils.copy(tab, recursive)
    ---@type table
    local copied = {}

    for k, v in pairs(--[[---@type table]] tab) do
        copied[k] = (recursive and type(v) == 'table' and
            TableUtils.copy(--[[---@type table]] v, true)
        ) or v
    end

    return --[[---@type T]] copied
end

---@overload fun<V>(tab: V, ...: V): void
---@overload fun<V, CovariantA : V>(arr: V[], a: CovariantA[]): void
---@overload fun<V, CovariantA : V, CovariantB : V>(arr: V[], a: CovariantA[], b: CovariantB[]): void
---@overload fun<V, CovariantA : V, CovariantB : V, CovariantC : V>(arr: V[], a: CovariantA[], b: CovariantB[], c: CovariantC[]): void
---@overload fun<V, CovariantA : V, CovariantB : V, CovariantC : V, CovariantD : V>(arr: V[], a: CovariantA[], b: CovariantB[], c: CovariantC[], d: CovariantD[]): void
---@overload fun<V>(arr: std__Packed<V>, ...: V[] | std__Packed<V>): void
---@generic K, V
---@param tab table<K, V>
---@vararg table<K, V>
---@return void
function TableUtils.inject(tab, ...)
    local otherTables = { ... }

    ---@type nil | boolean
    local isArray = nil

    ---@type number
    local arrayLength = 0

    ---@type boolean
    local isPacked = false

    for _, otherTable in ipairs(otherTables) do
        if isArray == nil and next(tab) then
            isArray = TableUtils.isArray(tab)

            if isArray then
                arrayLength, isPacked = TableUtils.arrayLength(--[[---@type V[] | std__Packed<V>]] tab)
            end
        end

        if isArray then
            local arr = --[[---@type V[] | std__Packed<V>]] tab

            for _, v in iterate(--[[---@type V[] ]] otherTable) do
                arrayLength = arrayLength + 1
                arr[arrayLength] = v
            end
        else
            for k, v in pairs(otherTable) do
                tab[k] = v
            end
        end
    end

    if isPacked then
        (--[[---@type std__Packed<V>]] tab).n = arrayLength
    end
end

---@overload fun<T>(arr: T[], ...: T[]): T[]
---@overload fun<A, B>(a: A[], b: B[]): (A | B)[]
---@overload fun<A, B, C>(a: A[], b: B[], c: C[]): (A | B | C)[]
---@overload fun<A, B, C, D>(a: A[], b: B[], c: C[], d: D[]): (A | B | C | D)[]
---@overload fun<T>(a: T, ...: T): T
---@vararg table
---@return table
function TableUtils.merge(...)
    local result = TableUtils.copy((--[[---@not nil]] ...))
    TableUtils.inject(result, select(2, ...))
    return result
end

---@overload fun<V>(arrays: std__Packed<V>[]): std__Packed<V>
---@generic V
---@param arrays V[][]
---@return V[]
function TableUtils.flatten(arrays)
    ---@type V[]
    local flattened = {}
    local i = 0

    for _, array in ipairs(arrays) do
        for _, v in iterate(array) do
            i = i + 1
            flattened[i] = v
        end
    end


    if i > 0 and type((--[[---@type std__Packed<V[]>]] arrays[1]).n) == 'number' then
        (--[[---@type std__Packed<V>]] flattened).n = i
    end

    return flattened
end

---@generic K, V
---@param tab table<K, V>
---@return K[]
function TableUtils.keys(tab)
    ---@type K[]
    local keys = {}
    local i = 0

    for k, _ in pairs(tab) do
        i = i + 1
        keys[i] = k
    end

    return keys
end

---@generic K, V
---@param tab table<K, V>
---@return V[]
function TableUtils.values(tab)
    ---@type V[]
    local values = {}
    local i = 0

    for _, v in pairs(tab) do
        i = i + 1
        values[i] = v
    end

    return values
end

---@overload fun(tab: table): number
---@generic K, V
---@param tab table<K, V>
---@param predicate? nil | fun(value: V, key: K): boolean
---@return number
function TableUtils.count(tab, predicate)
    local count = 0

    if predicate then
        for k, v in pairs(tab) do
            if predicate(v, k) then
                count = count + 1
            end
        end
    else
        for _, _ in pairs(tab) do
            count = count + 1
        end
    end

    return count
end

--- Picks unique random entries from an array. If `count` is nil/omitted, the result is a single element. When `count`
--- is specified, then the lesser of `count` / length unique entries will be returned in an array.
---@overload fun<V>(arr: std__Packed<V>): nil | V
---@overload fun<V>(arr: V[]): V
---@overload fun<V>(arr: std__Packed<V>, count: number): V[]
---@overload fun<V>(arr: V[], count: number): V[]
---@generic V
---@param arr V[]
---@param count? number
---@return nil | V | V[]
function TableUtils.pickRandom(arr, count)
    local length = TableUtils.arrayLength(arr)

    if length == 0 then
        -- Not typed as returning nil, but this is the same behavior as accessing an array out of bounds.
        return count and {} or nil
    end

    if count == nil then
        return arr[math.random(length)]
    end

    count = math.min(--[[---@not nil]] count, length)

    local copy = TableUtils.copy(arr)

    for i = 1, count do
        local index = math.random(i, length)
        copy[i], copy[index] = copy[index], copy[i]
    end

    return TableUtils.range(copy, 1, --[[---@not nil]] count)
end

---@overload fun<V>(arr: std__Packed<V>): std__Packed<V>
---@generic V
---@param arr V[]
---@return V[]
function TableUtils.inplaceShuffle(arr)
    ---@type V
    local temp

    ---@type number
    local j

    for i = TableUtils.arrayLength(arr), 2, -1 do
        j = math.random(i)
        temp = arr[i]
        arr[i] = arr[j]
        arr[j] = temp
    end

    return arr
end

---@overload fun<V>(arr: std__Packed<V>): std__Packed<V>
---@generic V
---@param arr V[]
---@return V[]
function TableUtils.reverse(arr)
    ---@type V[]
    local reversed = {}

    local length, isFixed = TableUtils.arrayLength(arr)
    local j = 1

    for i = length, 1, -1 do
        reversed[j] = arr[i]
        j = j + 1
    end

    if isFixed then
        (--[[---@type std__Packed<V>]] reversed).n = length
    end

    return reversed
end

--- Copies the elements within range [start, finish] into a new array.
---@overload fun<V>(arr: std__Packed<V>, start: number, finish?: nil | number): std__Packed<V>
---@overload fun<V>(arr: V[], start: number, finish?: nil | number): V[]
---@generic V
---@param arr V[]
---@param start number
---@param finish? number @Default TableUtils.arrayLength(arr)
---@return V[] | std__Packed<V>
function TableUtils.range(arr, start, finish)
    ---@type V[]
    local range = {}

    local arrLength, isPacked = TableUtils.arrayLength(arr)

    start = math.min(start, arrLength)
    finish = finish and math.min(--[[---@not nil]] finish, arrLength) or arrLength

    for i in fixedLengthIterator(--[[---@not nil]] finish), arr, start - 1 do
        range[i - start + 1] = arr[i]
    end

    if isPacked then
        (--[[---@type std__Packed<V>]] range).n = (--[[---@not nil]] finish) - start + 1
        return (--[[---@type std__Packed<V>]] range)
    end

    return range
end

---@overload fun<V>(arr: std__Packed<V>): std__Packed<V>
---@overload fun<V>(arr: V[]): V[]
---@generic V
---@param arr V[]
---@return V[] | std__Packed<V>
function TableUtils.unique(arr)
    ---@type table<V, true>
    local set = {}

    for _, value in iterate(arr) do
        if not set[value] then
            set[value] = true
        end
    end

    local values = TableUtils.keys(set)

    if type((--[[---@type std__Packed<V>]] arr).n) == 'number' then
        (--[[---@type std__Packed<V>]] arr).n = #values
        return --[[---@type std__Packed<V>]] arr
    end

    return values
end

--- Removes the first occurence of value from a table. In the case of arrays, values are shifted down to fill the gap.
---@overload fun<T>(arr: T[] | std__Packed<T>, value: T): false | (true, number)
---@overload fun<K, V>(arr: table<K, V>, value: V): false | (true, K)
---@param tab table
---@param value any
---@return false | (true, any)
function TableUtils.removeValue(tab, value)
    for k, v in iterate(tab) do
        if v == value then
            if type((--[[---@type std__Packed<any>]] tab).n) == 'number' then
                local length = (--[[---@type std__Packed<any>]] tab).n

                for i = k + 1, length do
                    tab[i - 1] = tab[i]
                end

                tab[length] = nil
                tab.n = length - 1
            elseif tab[1] ~= nil then
                table.remove(--[[---@type any[] ]] tab, k)
            else
                tab[k] = nil
            end

            return true, k
        end
    end

    return false
end

---@param tab table
---@return void
function TableUtils.clear(tab)
    for k in pairs(tab) do
        tab[k] = nil
    end
end

local TYPE_STRINGIFIERS = {
    ['nil'] = function(_) return 'nil' end,
    boolean = function(v) return tostring(v) end,
    number = function(v) return tostring(v) end,
    string = function(v) return "'" .. v .. "'" end,
    userdata = function(_) return 'userdata' end,
    ['function'] = function(_) return 'function' end,
    thread = function(_) return 'thread' end,
    table = function(v) return tostring(v) end,
}

---@overload fun(tab: table): string
---@overload fun(tab: table, recursive: boolean): string
---@param tab table
---@param recursive boolean
---@param depth number
---@return string
function TableUtils.dump(tab, recursive, depth)
    depth = depth or 1

    local indentation = string.rep('  ', depth)
    local str = '{'

    ---@type table<number, nil | boolean>
    local ordered_keys = {}

    for i, v in ipairs(--[[---@type any[] ]] tab) do
        ordered_keys[i] = true
        str = str .. '\n' .. indentation .. '[' .. i .. '] = '

        if recursive and type(v) == 'table' then
            str = str .. TableUtils.dump(v, true, depth + 1) .. ','
        else
            str = str .. TYPE_STRINGIFIERS[type(v)](v) .. ','
        end
    end

    for k, v in pairs(tab) do
        if not ordered_keys[--[[---@type number]] k] then
            str = str .. '\n' .. indentation .. '[' .. TYPE_STRINGIFIERS[type(k)](k) .. '] = '

            if recursive and type(v) == 'table' then
                str = str .. TableUtils.dump(v, true, depth + 1) .. ','
            else
                str = str .. TYPE_STRINGIFIERS[type(v)](v) .. ','
            end
        end
    end

    str = str .. '\n' .. string.rep('  ', depth - 1) .. '}'

    return str
end

return TableUtils
