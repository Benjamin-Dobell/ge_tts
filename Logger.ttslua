---@class ge_tts__Logger
local Logger = {}

Logger.ERROR = 1
Logger.WARNING = 2
Logger.INFO = 3
Logger.DEBUG = 4
Logger.VERBOSE = 5

---@type table<number, string>
local levelPrefixes = {
    [Logger.ERROR] = 'ERROR: ',
    [Logger.WARNING] = 'WARNING: ',
    [Logger.INFO] = '',
    [Logger.DEBUG] = '',
    [Logger.VERBOSE] = '',
}

setmetatable(Logger, {
    __call = function()
        ---@type ge_tts__Logger
        local self = {}

        local logLevel = Logger.INFO

        ---@return number @One of Logger.ERROR, Logger.WARNING, Logger.INFO, Logger.DEBUG or Logger.VERBOSE
        function self.getLogLevel()
            return logLevel
        end

        ---@param level number @One of Logger.ERROR, Logger.WARNING, Logger.INFO, Logger.DEBUG or Logger.VERBOSE
        function self.setLogLevel(level)
            logLevel = level
        end

        ---@param message string
        ---@param level number @One of Logger.ERROR, Logger.WARNING, Logger.INFO, Logger.DEBUG or Logger.VERBOSE
        function self.log(message, level)
            if level <= logLevel then
                print(levelPrefixes[level] .. message)
            end
        end

        return self
    end
})

local defaultLogger = Logger()
local defaultLogLevel = Logger.DEBUG

---@param logger ge_tts__Logger
function Logger.setDefaultLogger(logger)
    defaultLogger = logger
end

function Logger.getDefaultLogger()
    return defaultLogger
end

---@param level number @One of Logger.ERROR, Logger.WARNING, Logger.INFO, Logger.DEBUG or Logger.VERBOSE
function Logger.setDefaultLogLevel(level)
    defaultLogLevel = level
end

---@return number @One of Logger.ERROR, Logger.WARNING, Logger.INFO, Logger.DEBUG or Logger.VERBOSE
function Logger.getDefaultLogLevel()
    return defaultLogLevel
end

---@param message string
---@param level number @One of Logger.ERROR, Logger.WARNING, Logger.INFO, Logger.DEBUG or Logger.VERBOSE
function Logger.log(message, level)
    level = level or defaultLogLevel
    defaultLogger.log(message, level)
end

return Logger
