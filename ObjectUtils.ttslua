require('ge_tts.License')

local Base64 = require('ge_tts.Base64')
local Json = require('ge_tts.Json')
local Object = require('ge_tts.Object')
local SaveManager = require('ge_tts.SaveManager')
local Vector3 = require('ge_tts.Vector3')

---There's a random component to our GUIDs designed to mitigate collisions is a user wants to copy objects between mods.
local GUID_PREFIX_RANDOM_BYTE_LENGTH = 3

---@type string
local guidPrefix

---@type number
local guidIndex = 0

---@class ge_tts__ObjectUtils
local ObjectUtils = {}

---@param obj tts__Object
---@return ge_tts__Vector3
function ObjectUtils.getTransformScale(obj)
    local rotation = obj.getRotation()
    local onesVector = Vector3(1, 1, 1).rotateZ(rotation.z).rotateX(rotation.x).rotateY(rotation.y)
    local scale = Vector3(obj.positionToLocal(onesVector.add(obj.getPosition())))
    return scale
end

---@param tag string
---@return boolean
function ObjectUtils.isContainerTag(tag)
    return tag == Object.Tag.Deck or tag == Object.Tag.Bag
end

---@return string
function ObjectUtils.nextGuid()
    guidIndex = guidIndex + 1
    return guidPrefix .. tostring(guidIndex)
end

---@param objectState tts__ObjectState
---@param guid string
---@param callback_function nil | tts__ObjectCallbackFunction
local function safeSpawnObject(objectState, guid, callback_function)
    objectState.GUID = guid

    local spawningObject = spawnObjectData({
        data = objectState,
        callback_function = callback_function,
    })

    return spawningObject
end

---
---A wrapper around TTS' spawnObjectData() which assigns GUIDs in a fashion that mitigates collisions with objects
---in containers.
---
---@param objectState tts__ObjectState @Will be JSON encoded after we generate and assign a GUID.
---@param callback_function? nil | tts__ObjectCallbackFunction @Callback that will be called when the object has finished spawning.
---@return tts__Object
function ObjectUtils.safeSpawnObject(objectState, callback_function)
    return safeSpawnObject(objectState, ObjectUtils.nextGuid(), callback_function)
end

---
---Same as ObjectUtils.safeSpawnObject(...), except that instead of generating a unique GUID, it is your responsibility
---to provide one. If you fail to provide a unique GUID, all safety guarantees are lost.
---
---In practice, you should only call this method if you're respawning an object that was destroyed.
---
---@overload fun(objectState: tts__ObjectState, guid: string): tts__Object
---@param objectState tts__ObjectState @Will be JSON encoded after we generate and assign a GUID.
---@param guid string
---@param callback_function nil | tts__ObjectCallbackFunction @Callback that will be called when the object has finished spawning.
---@return tts__Object
function ObjectUtils.safeRespawnObject(objectState, guid, callback_function)
    return safeSpawnObject(objectState, guid, callback_function)
end

---@overload fun(position: nil | tts__VectorShape): tts__ObjectState_Transform
---@overload fun(position: nil | tts__VectorShape, rotation: nil | tts__VectorShape): tts__ObjectState_Transform
---@overload fun(position: nil | tts__VectorShape, rotation: nil | tts__VectorShape, scale: nil | tts__VectorShape): tts__ObjectState_Transform
---@overload fun(transform: {position: nil | tts__VectorShape, rotation: nil | tts__VectorShape, scale: nil | tts__VectorShape}): tts__ObjectState_Transform
---@vararg ge_tts__Vector3
---@return tts__ObjectState_Transform
function ObjectUtils.transformState(...)
    ---@type tts__ObjectState_Transform
    local state = {}

    ---@type nil | tts__VectorShape
    local position

    ---@type nil | tts__VectorShape
    local rotation = nil

    ---@type nil | tts__VectorShape
    local scale = nil

    if select('#', ...) == 1 then
        local args = --[[---@type table]] ...

        if args[1] then
            position = --[[---@type tts__VectorShape]] args
        else
            local transform = --[[---@type {position: nil | tts__VectorShape, rotation: nil | tts__VectorShape, scale: nil | tts__VectorShape}]] args
            position = transform.position
            rotation = transform.rotation
            scale = transform.scale
        end
    else
        position, rotation, scale = ...
    end

    if position then
        state.posX = (--[[---@type tts__CharVectorShape]] position).x or (--[[---@type tts__NumVectorShape]] position)[1]
        state.posY = (--[[---@type tts__CharVectorShape]] position).y or (--[[---@type tts__NumVectorShape]] position)[2]
        state.posZ = (--[[---@type tts__CharVectorShape]] position).z or (--[[---@type tts__NumVectorShape]] position)[3]
    end

    if rotation then
        state.rotX = (--[[---@type tts__CharVectorShape]] rotation).x or (--[[---@type tts__NumVectorShape]] rotation)[1]
        state.rotY = (--[[---@type tts__CharVectorShape]] rotation).y or (--[[---@type tts__NumVectorShape]] rotation)[2]
        state.rotZ = (--[[---@type tts__CharVectorShape]] rotation).z or (--[[---@type tts__NumVectorShape]] rotation)[3]
    end

    if scale then
        state.scaleX = (--[[---@type tts__CharVectorShape]] scale).x or (--[[---@type tts__NumVectorShape]] scale)[1]
        state.scaleY = (--[[---@type tts__CharVectorShape]] scale).y or (--[[---@type tts__NumVectorShape]] scale)[2]
        state.scaleZ = (--[[---@type tts__CharVectorShape]] scale).z or (--[[---@type tts__NumVectorShape]] scale)[3]
    end

    return state
end

---@param transformState tts__ObjectState_Transform
---@return ge_tts__Vector3
function ObjectUtils.getTransformStatePosition(transformState)
    return Vector3(
        transformState.posX or 0,
        transformState.posY or 0,
        transformState.posZ or 0
    )
end

---@param transformState tts__ObjectState_Transform
---@return ge_tts__Vector3
function ObjectUtils.getTransformStateRotation(transformState)
    return Vector3(
        transformState.rotX or 0,
        transformState.rotY or 0,
        transformState.rotZ or 0
    )
end

---@param transformState tts__ObjectState_Transform
---@return ge_tts__Vector3
function ObjectUtils.getTransformStateScale(transformState)
    return Vector3(
        transformState.scaleX or 1,
        transformState.scaleY or 1,
        transformState.scaleZ or 1
    )
end

---
---Same as ObjectUtils.safeSpawnObject except that each entry in containerState.ContainedObjects will also be assigned a
---unique GUID.
---
---@overload fun(containerState: tts__ContainerState): tts__Container
---@param containerState tts__ContainerState @Will be JSON encoded after we generate and assign a GUID.
---@param callback_function nil | tts__Callback<fun(container: tts__Container): void> @Callback that will be called when the object has finished spawning.
---@return tts__Container
function ObjectUtils.safeSpawnContainer(containerState, callback_function)
    for _, objectState in ipairs(containerState.ContainedObjects) do
        objectState.GUID = ObjectUtils.nextGuid()
    end

    return --[[---@type tts__Container]] ObjectUtils.safeSpawnObject(containerState, --[[---@type nil | tts__ObjectCallbackFunction]] callback_function)
end

local POSITION_NEAR_THRESHOLD = 0.025001
local POSITION_NEAR_THRESHOLD_SQUARED = POSITION_NEAR_THRESHOLD * POSITION_NEAR_THRESHOLD

--- Works around a bug in TTS' setPositionSmooth that occurs if you setPositionSmooth to a position then immediately
--- back to the current position with setPositionSmooth, then the second call is incorrectly ignored.
---@param object tts__Object
---@param position tts__VectorShape
---@param collide? nil | boolean
---@param fast? nil | boolean
function ObjectUtils.setPositionSmooth(object, position, collide, fast)
    if object.getPositionSmooth() then
        local objectPosition = object.getPosition()

        if Vector3.distanceSquared(position, objectPosition) <= POSITION_NEAR_THRESHOLD_SQUARED then
            object.setPosition(position)
            return
        end
    end

    object.setPositionSmooth(position, collide, fast)
end

local ROTATION_NEAR_THRESHOLD = 1.000001

--- Works around a bug in TTS' setRotationSmooth that occurs if you setRotationSmooth to a rotation then immediately
--- back to the current rotation with setRotationSmooth, then the second call is incorrectly ignored.
---@param object tts__Object
---@param rotation tts__VectorShape
---@param collide? nil | boolean
---@param fast? nil | boolean
function ObjectUtils.setRotationSmooth(object, rotation, collide, fast)
    if object.getRotationSmooth() then
        local objectRotation = object.getRotation()
        local objectRotationDirection = Vector3(1, 0, 0)
            .rotateZ(objectRotation.z)
            .rotateX(objectRotation.x)
            .rotateY(objectRotation.y)

        local rotationDirection = Vector3(1, 0, 0)
            .rotateZ(Vector3.z(rotation))
            .rotateX(Vector3.x(rotation))
            .rotateY(Vector3.y(rotation))

        if Vector3.angle(rotationDirection, objectRotationDirection) <= ROTATION_NEAR_THRESHOLD then
            object.setRotation(rotation)
            return
        end
    end

    object.setRotationSmooth(rotation, collide, fast)
end

---@shape __ge_tts__ObjectUtils_SavedStateData
---@field guidPrefix string

---@return string
local function onSave()
    ---@type __ge_tts__ObjectUtils_SavedStateData
    local data = {
        guidPrefix = guidPrefix,
    }

    return Json.encode(data)
end

local function onFirstLoad()
    local guidRandomBytes = {}

    for _ = 1, GUID_PREFIX_RANDOM_BYTE_LENGTH do
        table.insert(guidRandomBytes, math.random(1, 255))
    end

    guidPrefix = Base64.encode(guidRandomBytes, false) .. ':'
end

---@param savedState string
local function onLoad(savedState)
    if savedState == '' then
        onFirstLoad()
        return
    end

    local data = --[[---@type __ge_tts__ObjectUtils_SavedStateData]] Json.decode(savedState)

    guidPrefix = data.guidPrefix
end

local MODULE_NAME = 'ge_tts.ObjectUtils'

SaveManager.registerOnSave(MODULE_NAME, onSave)
SaveManager.registerOnLoad(MODULE_NAME, onLoad)

return ObjectUtils
