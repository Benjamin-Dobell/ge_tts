require('ge_tts.License')

local Ui = {}

-- Common

Ui.Alignment = {
    UpperLeft = "UpperLeft",
    UpperCenter = "UpperCenter",
    UpperRight = "UpperRight",
    MiddleLeft = "MiddleLeft",
    MiddleCenter = "MiddleCenter",
    MiddleRight = "MiddleRight",
    LowerLeft = "LowerLeft",
    LowerCenter = "LowerCenter",
    LowerRight = "LowerRight",
}

Ui.Animation = {
    Hide = {
        None = "None",
        Shrink = "Shrink",
        FadeOut = "FadeOut",
        SlideOutLeft = "SlideOut_Left",
        SlideOutRight = "SlideOut_Right",
        SlideOutTop = "SlideOut_Top",
        SlideOutBottom = "SlideOut_Bottom",
    },
    Show = {
        None = "None",
        Grow = "Grow",
        FadeIn = "FadeIn",
        SlideInLeft = "SlideIn_Left",
        SlideInRight = "SlideIn_Right",
        SlideInTop = "SlideIn_Top",
        SlideInBottom = "SlideIn_Bottom",
    },
}

Ui.ContentSizeFit = {
    Vertical = "vertical",
    Horizontal = "horizontal",
    Both = "both",
    None = "none",
}

Ui.FontStyle = {
    Normal = "Normal",
    Bold = "Bold",
    Italic = "Italic",
    BoldItalic = "BoldItalic",
}

Ui.IconAlignment = {
    Left = "Left",
    Right = "Right",
}

Ui.MouseButton = {
    Left = "-1",
    Right = "-2",
    Middle = "-3",
}

Ui.Navigation = {
    None = "None",
    Horizontal = "Horizontal",
    Vertical = "Vertical",
    Automatic = "Automatic",
    Explicit = "Explicit",
}

Ui.Tag = {
    Button = "Button",
    Defaults = "Defaults",
    HorizontalLayout = "HorizontalLayout",
    Image = "Image",
    Option = "Option",
    Panel = "Panel",
    Text = "Text",
    VerticalLayout = "VerticalLayout",
}

Ui.TooltipPosition = {
    Above = "Above",
    Below = "Below",
    Left = "Left",
    Right = "Right",
}

-- Elements

Ui.Button = {
    Transition = {
        None = "None",
        ColorTint = "ColorTint",
        SpriteSwap = "SpriteSwap",
        Animation = "Animation",
    }
}

Ui.Text = {
    HorizontalOverflow = {
        Wrap = "Wrap",
        Overflow = "Overflow",
    },
    VerticalOverflow = {
        Truncate = "Truncate",
        Overflow = "Overflow",
    }
}

---@generic Attributes : tts__UIElementBase_Attributes
---@generic Child : tts__UIElement
---@generic Element : tts__UIElementBase<Attributes, Child>
---@param element Element
---@param attributes Attributes
function Ui.setAttributes(element, attributes)
    if not element.attributes then
        element.attributes = --[[---@type Attributes]] {}
    end

    for k, v in pairs(attributes) do
        (--[[---@type any]] element.attributes)[k] = v
    end
end

-- UI.setAttribute is buggy and in certain cases unrelated attributes to the one being updated are visually discarded.
-- This is particularly prominent with buttons, setting 'text' or 'interactable' result in 'color' and 'textColor' being
-- discarded. We provide convenience functions that (re)set all attributes rather than just the one/few being targetted.
Ui.Runtime = {}

---@param id tts__UIElement_Id
---@param name string
---@param value string | number | boolean
---@return boolean
function Ui.Runtime.setAttribute(id, name, value)
    local attributes = UI.getAttributes(id)
    attributes[name] = tostring(value)
    return UI.setAttributes(id, attributes)
end

---@generic V : (string | number | boolean)
---@param id tts__UIElement_Id
---@param attributes table<string, V>
---@return boolean
function Ui.Runtime.setAttributes(id, attributes)
    local allAttributes = UI.getAttributes(id)

    for k, v in pairs(attributes) do
        allAttributes[k] = tostring(v)
    end

    return UI.setAttributes(id, allAttributes)
end

return Ui
