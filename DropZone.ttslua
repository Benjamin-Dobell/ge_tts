ge_tts_package('ge_tts/DropZone', function()
    ---@type ge_tts__TableUtils
    local TableUtils = ge_tts_require('ge_tts/TableUtils')

    ---@type ge_tts__EventManager
    local EventManager = ge_tts_require('ge_tts/EventManager')

    ---@type ge_tts__Logger
    local Logger = ge_tts_require('ge_tts/Logger')

    local DROP_ZONE_Y = 0.96

    local MAX_DROP_VELOCITY_2 = 5 * 5 -- 5 in/sec

    ---@type table<userdata, userdata> @table<tts__ScriptingZone, tts_DropZone>
    local scriptingZoneDropZoneMap = {}

    ---@type table<userdata, userdata[]> @table<tts__Object, tts_DropZone[]>
    local objectDropZonesMap = {}

    ---@param position number[] @2D X,Z position
    ---@param size number[] @2D X,Z size
    ---@param rotation number @rotation around Y-axis in degrees
    ---@param callback fun(object:userdata) @function(object:tts__ScriptingZone) - TTS object spawned callback
    local function spawn(position, size, rotation, callback)
        local json = {
            Name = "ScriptingTrigger",
            Transform = {
                posX = position[1],
                posY = 2.5 + DROP_ZONE_Y,
                posZ = position[2],
                rotX = 0.0,
                rotY = rotation,
                rotZ = 0.0,
                scaleX = size[1],
                scaleY = 5,
                scaleZ = size[2]
            },
            Locked = true,
            GUID = "000000"
        }
        return spawnObjectJSON({
            callback_function=callback,
            json=JSON.encode(json)
        })
    end

    ---@class ge_tts__DropZone
    local DropZone = {}

    setmetatable(DropZone, {
        ---@param positionOrData number[]|table @2D position, or saved data table
        ---@param size number[] @2D size
        ---@param rotation number @rotation around Y-axis, in degrees
        ---@param occupantScale number @occupant's desired X-axis scale. When scaling is applied it is applied to all dimensions i.e. aspect ratio is preserved
        __call = function(_, positionOrData, size, rotation, occupantScale)
            ---@type ge_tts__DropZone
            local self = {}

            setmetatable(self, {
                __tostring = function(_)
                    return self.toString()
                end
            })

            local position

            local scriptingZone
            local occupyingObjects

            if DropZone.isSavedState(positionOrData) then
                local data = positionOrData

                position = data.position
                size = data.size
                rotation = data.rotation
                occupantScale = data.occupantScale
                scriptingZone = getObjectFromGUID(data.guid)
                occupyingObjects = TableUtils.map(data.occupyingObjectGuids, function(guid) return getObjectFromGUID(guid) end)

                scriptingZoneDropZoneMap[scriptingZone] = self
            else
                position = positionOrData

                spawn(position, size, rotation, function(spawnedScriptingZone)
                    scriptingZone = spawnedScriptingZone
                    scriptingZoneDropZoneMap[scriptingZone] = self
                end)
                occupyingObjects = {}
            end

            ---@return number[] @2D X,Z position
            function self.getPosition()
                return position
            end

            ---@return number[] @2D X,Z size
            function self.getSize()
                return size
            end

            ---@return number @rotation around Y-axis, in degrees
            function self.getRotation()
                return rotation
            end

            ---@return number @occupant's desired X-axis scale
            function self.getOccupantScale()
                return occupantScale
            end

            ---@return userdata @tts__ScriptingZone - associated TTS scripting zone
            function self.getScriptingZone()
                return scriptingZone
            end

            ---@return userdata[] @tts__Object[] - TTS objects that have been tracked as within the zone
            function self.getOccupyingObjects()
                return occupyingObjects
            end

            --- Called when a TTS object enters this DropZone.
            ---@param object userdata @tts__Object
            function self.onEnter(object)
            end

            --- Called when a TTS object leaves this DropZone.
            ---@param object userdata @tts__Object
            function self.onLeave(object)
                local index = TableUtils.find(occupyingObjects, object)

                if index then
                    table.remove(occupyingObjects, index)
                end
            end

            --- Called when a TTS object is dropped within this DropZone.
            ---@param colorName string @Color of the TTS player that dropped the TTS object.
            ---@param object userdata @tts__Object - The object that was dropped.
            function self.onDrop(colorName, object)
                local objectRotation = object.getRotation()
                local facingRotation = 0

                if objectRotation[3] > 90 then
                    facingRotation = 180
                elseif objectRotation[3] < -90 then
                    facingRotation = -180
                end

                object.setPositionSmooth({position[1], object.getPosition()[2], position[2]})
                object.setRotationSmooth({0, rotation, facingRotation})

                object.scale(occupantScale / object.getScale()[1])

                table.insert(occupyingObjects, object)
            end

            --- Called when a TTS object is picked up from this DropZone.
            ---@param colorName string @Color of the TTS player that dropped the TTS object.
            ---@param object userdata @tts__Object - The object that was picked up.
            function self.onPickUp(colorName, object)
                local index = TableUtils.find(occupyingObjects, object)

                if index then
                    table.remove(occupyingObjects, index)
                end
            end

            function self.save()
                return {
                    __savedState = true,
                    guid = scriptingZone.getGUID(),
                    position = position,
                    size = size,
                    rotation = rotation,
                    occupantScale = occupantScale,
                    occupyingObjectGuids = TableUtils.map(occupyingObjects, function(object) return object.getGUID() end)
                }
            end

            function self.destruct()
                scriptingZoneDropZoneMap[scriptingZone] = nil
                scriptingZone.destruct()
            end

            function self.toString()
                return 'DropZone (' .. tostring(scriptingZone.getGUID()) .. ')'
            end

            return self
        end,
    })

    function DropZone.isSavedState(value)
        return type(value) == 'table' and value.__savedState
    end

    EventManager.addHandler('onObjectEnterScriptingZone', function(scriptingZone, object)
        local dropZone = scriptingZoneDropZoneMap[scriptingZone]

        if dropZone then
            Logger.log(object.tag .. ' (' .. tostring(object.getGUID()) .. ') entered Drop Zone (' .. tostring(scriptingZone.getGUID()) .. ')', Logger.DEBUG)
            local objectZones = objectDropZonesMap[object]

            if objectZones then
                table.insert(objectZones, dropZone)
            else
                objectDropZonesMap[object] = { dropZone }
            end

            dropZone.onEnter(object)
        end
    end)

    EventManager.addHandler('onObjectLeaveScriptingZone', function(scriptingZone, object)
        local dropZone = scriptingZoneDropZoneMap[scriptingZone]

        if dropZone then
            Logger.log(object.tag .. ' (' .. tostring(object.getGUID()) .. ') left Drop Zone (' .. tostring(scriptingZone.getGUID()) .. ')', Logger.DEBUG)
            local objectZones = objectDropZonesMap[object]

            if objectZones then
                objectZones = TableUtils.reject(objectZones, function(z)
                    return dropZone == z
                end)

                objectDropZonesMap[object] = #objectZones > 0 and objectZones or nil

                dropZone.onLeave(object)
            end
        end
    end)

    EventManager.addHandler('onObjectDrop', function(colorName, object)
        local velocity = object.getVelocity()
        local velocity_2 = velocity[1] * velocity[1] + velocity[2] * velocity[2] + velocity[3] * velocity[3]

        if velocity_2 < MAX_DROP_VELOCITY_2 then
            local objectZones = objectDropZonesMap[object]

            if objectZones then
                local objectPosition = object.getPosition()

                local nearestDropZone = TableUtils.reduce(objectZones, {math.huge, nil}, function(pair, dropZone)
                    local zonePosition = dropZone.getPosition()
                    local delta = {zonePosition[1] - objectPosition[1], zonePosition[2] - objectPosition[3]}
                    local dist_2 = delta[1] * delta[1] + delta[2] * delta[2]
                    return dist_2 < pair[1] and {dist_2, dropZone } or pair
                end)[2]

                Logger.log(
                    object.tag .. ' (' .. tostring(object.getGUID()) .. ') dropped in Drop Zone (' .. tostring(nearestDropZone.getScriptingZone().getGUID())
                            .. ')',
                    Logger.DEBUG
                )

                nearestDropZone.onDrop(colorName, object)
            end
        end
    end)

    EventManager.addHandler('onObjectPickUp', function(colorName, object)
        local objectZones = objectDropZonesMap[object]

        if objectZones then
            for _, dropZone in ipairs(objectZones) do
                Logger.log(
                        object.tag .. ' (' .. tostring(object.getGUID()) .. ') picked up within Drop Zone (' .. tostring(dropZone.getScriptingZone().getGUID())
                                .. ')',
                        Logger.DEBUG
                )
                if TableUtils.find(dropZone.getOccupyingObjects(), object) then
                    Logger.log(
                            object.tag .. ' (' .. tostring(object.getGUID()) .. ') picked up from Drop Zone (' .. tostring(dropZone.getScriptingZone().getGUID())
                                    .. ')',
                            Logger.DEBUG
                    )

                    dropZone.onPickUp(colorName, object)
                    break
                end
            end
        end
    end)

    EventManager.addHandler('onObjectDestroy', function(object)
        local dropZones = objectDropZonesMap[object]

        if dropZones then
            for _, dropZone in ipairs(dropZones) do
                Logger.log(
                    object.tag .. ' (' .. tostring(object.getGUID()) .. ') removed from Drop Zone (' .. dropZone.getScriptingZone().getGUID()
                            .. ') as it\'s being destroyed',
                    Logger.DEBUG
                )
                dropZone.onLeave(object)
            end

            objectDropZonesMap[object] = nil
        end
    end)

    return DropZone
end)
